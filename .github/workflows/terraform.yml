on:
  push:
    branches:
      - master
  pull_request:

jobs:
  build: 
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  checks:
    name: 'Terraform Formatting'
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 0.14.10

    - name: Terraform Format
      working-directory: infra
      run: terraform fmt -check -recursive

    - name: Terraform Plan
      if: github.event_name == 'pull_request'
      working-directory: infra/stages/staging
      run: terraform init && terraform plan -no-color
      continue-on-error: true

    - name: Update Pull Request
      uses: actions/github-script@v3
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
          <details><summary>Show Plan</summary>
          \`\`\`${process.env.PLAN}\`\`\`
          </details>
          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

          github.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1

  staging_deploy:
    name: Terraform Staging Deploy
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: infra/stages/staging
    environment:
      name: Staging
      url: https://thadmin-staging.technicie.nl
    steps:
      - name: Terraform Apply
        if: github.ref == 'refs/heads/master' && github.event_name == 'push'
        run: terraform init && terraform apply -auto-approve

  production_deploy:
    name: Terraform Staging Deploy
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: infra/stages/production
    environment:
      name: Production
      url: https://thadmin.thalia.nu
    steps:
      - name: Terraform Apply
        if: github.ref == 'refs/heads/master' && github.event_name == 'push'
        run: terraform init && terraform apply -auto-approve